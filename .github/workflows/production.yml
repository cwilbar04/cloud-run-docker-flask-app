name: Deploy Webapp

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

env:
  # TODO: Change variable to your image name.
  IMAGE: google-sentiment-analysis-webapp
  PROJECT_ID: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
  TF_VAR_GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
  TF_VAR_CONTAINER_TAG: $GITHUB_SHA
  TF_WORKSPACE: prod
  GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_ACCOUNT_CREDENTIALS }}


jobs:
  build-push-docker:
    name: Build and Push Docker
    runs-on: ubuntu-latest

    environment:
      name: production

    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GOOGLE_ACCOUNT_CREDENTIALS }}
        project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}

    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |-
        gcloud --quiet auth configure-docker

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

  deploy-webapp-terraform:
    name: 'Deploy Webapp Using Terraform'
    needs: build-push-docker
    runs-on: ubuntu-latest

    environment:
      name: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Set GITHUB SHA as Environment Variable for Tenserflow
    - name: Set env
      run: echo "TF_VAR_CONTAINER_TAG=$(echo $GITHUB_SHA)" >> $GITHUB_ENV
      
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan       

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve
